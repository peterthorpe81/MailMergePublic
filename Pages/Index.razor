
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@inject GraphServiceClient Client
@inject AuthenticationStateProvider AuthenticationStateProvider 
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@attribute [Authorize]
@page "/"

<PageTitle>Mail Merge</PageTitle>

<MudText Typo="Typo.body1" Class="my-2" >This application will mail merge an excel table. It will then email all rows in the table using your outlook mail box.</MudText>

<MudText Typo="Typo.body1" Class="mb-2" >Select a file from your one drive below. The file must be an Excel workbook containg a table. An example you can put on onedrive is here: 
<MudLink Href="ExampleMerge.xlsx" Underline="Underline.Always" Color="Color.Primary" download>ExampleMerge.xlsx</MudLink>
</MudText>

<MudText Typo="Typo.body1" Class="mb-2" >Select the column name containing the To: emails addresses, Cc: and Bcc.</MudText>

<MudText Typo="Typo.body1" Class="mb-2" >The subject and body can then be populated with merge fields from the Excel table. The syntax is ((ColumnName)) in the body or subject to perform replacments.</MudText>
@*
<MudButton Class="pa-2" Variant="Variant.Filled" Color="Color.Primary" @onclick=TestEmail>Test Email</MudButton>
*@

<MudPaper Spacing=1 Class="px-8 py-2 ma-2">
    <div class="d-flex gap-4 align-center">
        <FilePicker Processing=@SelectingFile OnFileSelected=FileSelected></FilePicker>

        @if(@Model?.Table?.Name is not null)
        {
            <MudText Typo="Typo.body1">@Model.Table &gt; @Model.Table.Name</MudText>
        }
    </div>
</MudPaper>


@if (Model.Table is not null)
{
<MudPaper Spacing=1 Class="pa-8 ma-2">
<MudGrid Class="mud-grid-spacing-xs-2">
    <MudItem xs="12" sm="12">
        <MudSelect @bind-Value=Model.ToField Margin="Margin.Dense"  Dense="true" T="WorkbookTableColumn?" Label="To" Variant="Variant.Outlined">
            @if(Model?.Table?.Columns is not null)
            {
                foreach (var column in Model.Table.Columns)
                {
                    <MudSelectItem Value="@column">@column.Name</MudSelectItem>                
                }       
            }    
        </MudSelect>
    </MudItem>
    <MudItem xs="12" sm="12">
        <MudSelect @bind-Value=Model.CcField Margin="Margin.Dense"  Dense="true" T="WorkbookTableColumn?" Label="Cc" Variant="Variant.Outlined">
            @if(Model?.Table?.Columns is not null)
            {
                foreach (var column in Model.Table.Columns)
                {
                    <MudSelectItem Value="@column">@column.Name</MudSelectItem>                
                }       
            }                   
        </MudSelect>
    </MudItem>
    <MudItem xs="12" sm="12">
        <MudSelect @bind-Value=Model.BccField Margin="Margin.Dense"  Dense="true" T="WorkbookTableColumn?" Label="Bcc" Variant="Variant.Outlined">
            @if(Model?.Table?.Columns is not null)
            {
                foreach (var column in Model.Table.Columns)
                {
                    <MudSelectItem Value="@column">@column.Name</MudSelectItem>                
                }       
            }                    
        </MudSelect>
    </MudItem>
    <MudItem xs="12" sm="12">
          <MudTextField @bind-Value=Model.EmailSubject Margin="Margin.Dense"  Label="Subject" Variant="Variant.Outlined"></MudTextField>
    </MudItem>
    <MudItem xs="12" sm="12">
         <InputRichText @ref=bodyEditor @bind-Value=Model.EmailBody></InputRichText>
    </MudItem>
    <MudItem xs="12" sm="12">
        @if(Model?.Table?.Columns is not null)
        {
            <div class="d-flex gap-1 align-center">
                <MudText Typo="Typo.subtitle1" Class="mb-2">Columns. </MudText><MudText Typo="Typo.subtitle2" Class="mb-2">Press to insert.</MudText>
            </div>          
            
            foreach (var column in Model.Table.Columns)
            {                
                <MudChip @onclick=@(x => AddField(@column.Name)) Variant="Variant.Outlined" Color="Color.Primary">@column.Name</MudChip>             
            }       
        }  
    </MudItem>
    <MudItem xs="12" sm="12">          
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Preview">
            @if (PreviewingMerge)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Processing</MudText>
            }
            else
            {
                <MudText>Preview</MudText>
            }
        </MudButton>
    </MudItem>
</MudGrid>

  

</MudPaper>
}

@code 
{
    private InputRichText bodyEditor = default!;
    private MergeProcessor? merge;
    private Microsoft.Graph.User? user;

    private bool SelectingFile { get; set;}
    private bool PreviewingMerge { get; set;}

    private MailMergeModel Model { get; set; } = new MailMergeModel();

    private async Task FileSelected(OneDriveFile file)
    {        
        SelectingFile = true;
        //reset completely for now
        Model = new MailMergeModel() { From = user?.UserPrincipalName};
        IWorkbookTablesCollectionPage? tables;
        try 
        {
            tables =  await Client.Me.Drives[file.DriveId].Items[file.FileId].Workbook.Tables.Request().GetAsync();
        } 
        catch
        {
            Snackbar.Add("Error Getting Excel Workbook Using Graph", Severity.Info);
            SelectingFile = false;
            return;
        }

        if (tables is null || tables.Count == 0)
        {
            Snackbar.Add("No Tables Found in Excel Sheet", Severity.Info);
            SelectingFile = false;
            return;
        }

        var parameters = new DialogParameters();
        parameters.Add(nameof(TablesDialog.Tables), tables);

        var dialog = await DialogService.ShowAsync<TablesDialog>("Select Excel Table", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Model.Table = (WorkbookTable) result.Data;
            try 
            {
                //add rows and tables as they aren't part of the original tables request
                Model.Table.Columns = await Client.Me.Drives[file.DriveId].Items[file.FileId].Workbook.Tables[Model.Table.Name].Columns.Request().GetAsync();
                Model.Table.Rows = await Client.Me.Drives[file.DriveId].Items[file.FileId].Workbook.Tables[Model.Table.Name].Rows.Request().GetAsync();            
            } 
            catch
            {
                Snackbar.Add("Error Getting Excel Table Using Graph", Severity.Info);
                SelectingFile = false;
                return;
            }
        }
        else
        {            
            Snackbar.Add("Cancelled Table Selection", Severity.Info);
            SelectingFile = false;
        }

        SelectingFile = false;
    }
    
    public async Task Preview()
    { 
        PreviewingMerge = true;
        merge = await MergeProcessor.Create(Client, Model);
        if (merge.MergeValid)
        {          
            DialogOptions options = new DialogOptions() 
            { 
                MaxWidth = MaxWidth.ExtraExtraLarge, 
                FullWidth = false,
                FullScreen = false, 
                CloseButton = false, 
                NoHeader = false,
                DisableBackdropClick = false,
                Position = DialogPosition.Center
            };

            var parameters = new DialogParameters();
            parameters.Add(nameof(PreviewDialog.Model), merge);

            var dialog = await DialogService.ShowAsync<PreviewDialog>("Preview", parameters, options);
        }
        else
        {            
            DialogOptions options = new DialogOptions() 
            { 
                MaxWidth = MaxWidth.ExtraExtraLarge, 
                FullWidth = false,
                FullScreen = false, 
                CloseButton = false, 
                NoHeader = false,
                DisableBackdropClick = false,
                Position = DialogPosition.Center
            };

            var parameters = new DialogParameters();
            parameters.Add(nameof(ExceptionDialog.Exceptions), merge.MergeExceptions);

            var dialog = await DialogService.ShowAsync<ExceptionDialog>("Merge Exceptions", parameters, options);
        }
        
        PreviewingMerge = false;
    }

    public async Task AddField(string column)
    { 
        if (bodyEditor is not null)
            await bodyEditor.InsertText($"(({column}))");
    }

    public async Task TestEmail()
    { 
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();  
        var claims = authState.User;  
        if (claims?.Identity?.IsAuthenticated != true)  
        {            
            Navigation.NavigateToLogin("authentication/login");
        }      
        
        var request = Client.Me.Request();
        user = await request.GetAsync();
        
        List<Recipient> toRecipients = new List<Recipient>();
         toRecipients.Add(new Recipient
            {
                EmailAddress = new Microsoft.Graph.EmailAddress
                {
                    Address = user.UserPrincipalName
                }
            });

        var message = new Microsoft.Graph.Message
        {
            Subject = "Mail Merge App Test",
            Body = new ItemBody
            {
                ContentType = Microsoft.Graph.BodyType.Html,
                Content = "<div>Test email from mail merge app.</div>"
            }, 
            ToRecipients = toRecipients
        };

        await Client.Me
            .SendMail(message, false)
            .Request()
            .PostAsync();
    }
    protected override async Task OnInitializedAsync()
    {
        var request = Client.Me.Request();
        user = await request.GetAsync();        
    }
}